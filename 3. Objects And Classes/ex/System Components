function system(components) {
    class Component{
        constructor(name){
            this.componentName = name;
            this.subcomponents = [];
        }
        addSubcomponent(subcomponent){
            this.subcomponents.push(subcomponent);
        }
        get getSubcomponents() {
            return this.subcomponents;
        }
    }
    class System{
        constructor(name) {
            this.systemName = name;
            this.components = [];
        }
        addComponent(component){
            this.components.push(component);
        }
        get getComponents() {
            return this.components;
        }

        set setComponents(value) {
            this._components = value;
        }
    }
    let systemsData = [];

    for (let i = 0; i <components.length ; i++) {
        let tokens = components[i].split(" | ");
        let systemName = tokens[0]
        let componentName = tokens[1];
        let subcomponentName = tokens[2];
        addSystem(systemsData, systemName, componentName, subcomponentName);
    }

    function addSystem(systemsData, systemName, componentName, subComponentName){

        let system  = checkSystem(systemsData,systemName);

        if(system === false){
            system = new System(systemName);
            let component = new Component(componentName);
            component.addSubcomponent(subComponentName);
            system.addComponent(component);
            systemsData.push(system);

            return 0;
        }

        let component = checkComponent(system,componentName,systemsData);

        if(component === false){
            component = new Component(componentName);
            component.addSubcomponent(subComponentName)
            system.addComponent(component);
            return 0;
        }

        component.addSubcomponent(subComponentName);


        if(systemsData.length === 0 ){
            systemsData.push(system);
        }

        return 1;




    }


    systemsData.sort((a,b) => {

        if(a.components.length > b.components.length){
            return -1
        }else if(a.components.length < b.components.length) {
            return 1
        }

        return a.systemName.localeCompare(b.systemName);
    });

console.log(    printSystems(systemsData))

    function checkSystem(systemsData , systemName){
        if(systemsData.length === 0){
            return false;
        }
        for (let i = 0; i <systemsData.length ; i++) {

            let currentSystemName = systemsData[i].systemName;

            if(currentSystemName === systemName ){
                return systemsData[i];
            }
        }
        return false;
    }
    function checkComponent(system, componentName, systemsData){

        if(system.components.length === 0){
            return false;
        }

        for (let i = 0; i < system.components.length ; i++) {
            if(system.components[i].componentName === componentName){
                return system.components[i];
            }
        }



        return false;
    }
    function printSystems(systemsData){

        let output = '';
        for (let i = 0; i <systemsData.length ; i++) {
                output += `${systemsData[i].systemName}\n`

            for (let indexComponent = 0; indexComponent < systemsData[i].components.length ; indexComponent++) {
                output += `|||${systemsData[i].components[indexComponent].componentName}\n`;

                for (let indexSubComponents = 0; indexSubComponents <systemsData[i].components[indexComponent].subcomponents.length ; indexSubComponents++) {
                    output += `||||||${systemsData[i].getComponents[indexComponent].getSubcomponents[indexSubComponents]}\n`;
                }
            }
        }


        return output;

    }


}
system(['SULS | Main Site | Home Page', 'SULS | Main Site | Login Page', 'SULS | Main Site | Register Page', 'SULS | Judge Site | Login Page', 'SULS | Judge Site | Submittion Page', 'Lambda | CoreA | A23', 'SULS | Digital Site | Login Page', 'Lambda | CoreB | B24', 'Lambda | CoreA | A24', 'Lambda | CoreA | A25', 'Lambda | CoreC | C4', 'Indice | Session | Default Storage', 'Indice | Session | Default Security'])